"""
Django settings for voting_platform project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import cloudinary
import cloudinary.uploader
import cloudinary.api

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^seknyy8o2s_3c8^bte&h6d(n&e5g=104p*obx-*h6uv$xc&cb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['election-backend-7v1z.onrender.com', 'localhost', '127.0.0.1', '*']
# ALLOWED_HOSTS = ['your-app.onrender.com', 'www.yourdomain.com']


SITE_URL = 'https://election-backend-7v1z.onrender.com'  # Change this to your production URL
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Local Apps
    'rest_framework',
    # 'rest_framework_simplejwt',
    # 'elections',
    'rest_framework.authtoken',  # Add this
    'elections.apps.ElectionsConfig',  # Use the full path to your AppConfig class
    'cloudinary_storage',  # Add this
    'cloudinary',  # Add this
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]

ROOT_URLCONF = 'voting_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'voting_platform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'nacos_election',
        'HOST': 'localhost',
        'USER': 'root',
        'PASSWORD': 'mr.yamusa',
    }
}
import dj_database_url

# DATABASES = {
#     'default': dj_database_url.config(default='postgresql://mr_yamusa:Hg0lDRzVlDf5c4mOiv1AsQD2bXAUq4tN@dpg-cu4ecrlumphs7387jumg-a.oregon-postgres.render.com/nacos_election')
# }
DATABASES['default'] = dj_database_url.parse("postgresql://mr_yamusa:Hg0lDRzVlDf5c4mOiv1AsQD2bXAUq4tN@dpg-cu4ecrlumphs7387jumg-a.oregon-postgres.render.com/nacos_election")


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        # You can add other authentication classes if needed
    ),
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',  # Require authentication for all views
    # ),
}

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': 'dbpp4q04p',
    'API_KEY': '426631541897162',
    'API_SECRET': 'M2FJDY1s2YHQTGEQh2t6gjrzrlI'  # Replace with your actual API secret
}



# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

import os
from pathlib import Path

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

BASE_DIR = Path(__file__).resolve().parent.parent

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (Uploaded files by users)
MEDIA_URL = '/media/'  # URL to access the media files
MEDIA_ROOT = BASE_DIR / 'media'  # Local file storage path (use cloud storage for production)

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFileStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
